From 4c4e4912cece8159cef27f51c13fc06b525f08f8 Mon Sep 17 00:00:00 2001
From: engstk <eng.stk@sapo.pt>
Date: Mon, 31 Jul 2017 18:28:24 +0100
Subject: [PATCH] drivers: misc: power: implement usb2 fast charge mode

echo 0 /sys/kernel/fast_charge/force_fast_charge (disable)
echo 1 /sys/kernel/fast_charge/force_fast_charge (enable)

Enables force charging up to 900mA in usb2 mode

Signed-off-by: engstk <eng.stk@sapo.pt>
---
 .../configs/vendor/violet-perf_defconfig      |   1 +
 drivers/misc/Kconfig                          |   6 +
 drivers/misc/Makefile                         |   1 +
 drivers/misc/fastchg.c                        | 103 ++++++++++++++++++
 drivers/power/supply/qcom/smb5-lib.c          |  11 ++
 include/linux/fastchg.h                       |  22 ++++
 6 files changed, 144 insertions(+)
 create mode 100644 drivers/misc/fastchg.c
 create mode 100644 include/linux/fastchg.h

diff --git a/arch/arm64/configs/vendor/violet-perf_defconfig b/arch/arm64/configs/vendor/violet-perf_defconfig
index 72a6493823d9..9f41791046be 100644
--- a/arch/arm64/configs/vendor/violet-perf_defconfig
+++ b/arch/arm64/configs/vendor/violet-perf_defconfig
@@ -41,6 +41,7 @@ CONFIG_DEFCONFIG_LIST="/lib/modules/$UNAME_RELEASE/.config"
 CONFIG_IRQ_WORK=y
 CONFIG_BUILDTIME_EXTABLE_SORT=y
 CONFIG_THREAD_INFO_IN_TASK=y
+CONFIG_FORCE_FAST_CHARGE=y
 
 #
 # General setup
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 0068b7328757..c8fd0ada2c5f 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -600,6 +600,12 @@ config ANT_CHECK
 	help
 	  Say 'y' here to include support for ant check gpio function.
 
+config FORCE_FAST_CHARGE
+	bool "Force faster charge rate for USB"
+	default n
+	help
+	  This allows users to override default charge rate for USB
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 75e670030ada..288af240cca6 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -92,3 +92,4 @@ $(obj)/lkdtm_rodata_objcopy.o: $(obj)/lkdtm_rodata.o FORCE
 obj-$(CONFIG_OKL4_USER_VIPC)    += okl4-vipc.o
 obj-$(CONFIG_OKL4_GUEST)        += okl4-panic.o
 obj-$(CONFIG_OKL4_LINK_SHBUF)    += okl4-link-shbuf.o
+obj-$(CONFIG_FORCE_FAST_CHARGE) += fastchg.o
diff --git a/drivers/misc/fastchg.c b/drivers/misc/fastchg.c
new file mode 100644
index 000000000000..d89d6f45de37
--- /dev/null
+++ b/drivers/misc/fastchg.c
@@ -0,0 +1,103 @@
+/*
+ * Author: Chad Froebel <chadfroebel@gmail.com>
+ *
+ * Port to guacamole: engstk <eng.stk@sapo.pt>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*
+ * Possible values for "force_fast_charge" are :
+ *
+ *   0 - Disabled (default)
+ *   1 - Force faster charge
+*/
+
+#include <linux/kobject.h>
+#include <linux/sysfs.h>
+#include <linux/fastchg.h>
+#include <linux/string.h>
+#include <linux/module.h>
+
+int force_fast_charge = 0;
+
+static int __init get_fastcharge_opt(char *ffc)
+{
+	if (strcmp(ffc, "0") == 0) {
+		force_fast_charge = 0;
+	} else if (strcmp(ffc, "1") == 0) {
+		force_fast_charge = 1;
+	} else {
+		force_fast_charge = 0;
+	}
+	return 1;
+}
+
+__setup("ffc=", get_fastcharge_opt);
+
+static ssize_t force_fast_charge_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	size_t count = 0;
+	count += sprintf(buf, "%d\n", force_fast_charge);
+	return count;
+}
+
+static ssize_t force_fast_charge_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	sscanf(buf, "%d ", &force_fast_charge);
+	if (force_fast_charge < 0 || force_fast_charge > 1)
+		force_fast_charge = 0;
+
+	return count;
+}
+
+static struct kobj_attribute force_fast_charge_attribute =
+__ATTR(force_fast_charge, 0664, force_fast_charge_show, force_fast_charge_store);
+
+static struct attribute *force_fast_charge_attrs[] = {
+&force_fast_charge_attribute.attr,
+NULL,
+};
+
+static struct attribute_group force_fast_charge_attr_group = {
+.attrs = force_fast_charge_attrs,
+};
+
+/* Initialize fast charge sysfs folder */
+static struct kobject *force_fast_charge_kobj;
+
+int force_fast_charge_init(void)
+{
+	int force_fast_charge_retval;
+
+	force_fast_charge_kobj = kobject_create_and_add("fast_charge", kernel_kobj);
+	if (!force_fast_charge_kobj) {
+			return -ENOMEM;
+	}
+
+	force_fast_charge_retval = sysfs_create_group(force_fast_charge_kobj, &force_fast_charge_attr_group);
+
+	if (force_fast_charge_retval)
+		kobject_put(force_fast_charge_kobj);
+
+	if (force_fast_charge_retval)
+		kobject_put(force_fast_charge_kobj);
+
+	return (force_fast_charge_retval);
+}
+
+void force_fast_charge_exit(void)
+{
+	kobject_put(force_fast_charge_kobj);
+}
+
+module_init(force_fast_charge_init);
+module_exit(force_fast_charge_exit);
diff --git a/drivers/power/supply/qcom/smb5-lib.c b/drivers/power/supply/qcom/smb5-lib.c
index ac39a1337cb8..1a0017a2a27b 100644
--- a/drivers/power/supply/qcom/smb5-lib.c
+++ b/drivers/power/supply/qcom/smb5-lib.c
@@ -28,6 +28,10 @@
 #include "storm-watch.h"
 #include "schgm-flash.h"
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+#include <linux/fastchg.h>
+#endif
+
 #define smblib_err(chg, fmt, ...)		\
 	pr_err("%s: %s: " fmt, chg->name,	\
 		__func__, ##__VA_ARGS__)	\
@@ -1359,6 +1363,13 @@ static int set_sdp_current(struct smb_charger *chg, int icl_ua)
 	u8 icl_options;
 	const struct apsd_result *apsd_result = smblib_get_apsd_result(chg);
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+	if (force_fast_charge > 0 && icl_ua == USBIN_500MA)
+	{
+		icl_ua = USBIN_900MA;
+	}
+#endif
+
 	/* power source is SDP */
 	switch (icl_ua) {
 	case USBIN_100MA:
diff --git a/include/linux/fastchg.h b/include/linux/fastchg.h
new file mode 100644
index 000000000000..b4c960038dbc
--- /dev/null
+++ b/include/linux/fastchg.h
@@ -0,0 +1,22 @@
+/*
+ * Author: Chad Froebel <chadfroebel@gmail.com>
+ *
+ * Port to guacamole: engstk <eng.stk@sapo.pt>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _LINUX_FASTCHG_H
+#define _LINUX_FASTCHG_H
+
+extern int force_fast_charge;
+
+#endif
-- 
2.25.1

